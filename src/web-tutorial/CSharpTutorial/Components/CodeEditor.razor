@using Microsoft.JSInterop
@implements IAsyncDisposable

<div class="code-editor-container">
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">@Title</h5>
            <div>
                <button class="btn btn-success btn-sm" @onclick="RunCode" disabled="@isRunning">
                    @if (isRunning)
                    {
                        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                    }
                    ‚ñ∂Ô∏è Run Code
                </button>
                <button class="btn btn-secondary btn-sm ms-1" @onclick="ResetCode">
                    üîÑ Reset
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <div id="@editorId" style="height: @Height; width: 100%;"></div>
        </div>
    </div>
    
    @if (ShowOutput)
    {
        <div class="card mt-3">
            <div class="card-header">
                <h6 class="mb-0">üì∫ Output</h6>
            </div>
            <div class="card-body bg-dark text-light" style="min-height: 150px; font-family: 'Consolas', 'Monaco', monospace;">
                @if (output.Any())
                {
                    @foreach (var line in output)
                    {
                        <div class="@(line.StartsWith("Error:") ? "text-danger" : "")">@line</div>
                    }
                }
                else
                {
                    <div class="text-muted">Click "Run Code" to see the output...</div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Title { get; set; } = "Code Editor";
    [Parameter] public string InitialCode { get; set; } = "";
    [Parameter] public string Height { get; set; } = "300px";
    [Parameter] public bool ShowOutput { get; set; } = true;
    [Parameter] public bool ReadOnly { get; set; } = false;
    [Parameter] public EventCallback<string> OnCodeChanged { get; set; }
    
    [Inject] private IJSRuntime JSRuntime { get; set; } = default!;
    
    private string editorId = $"editor_{Guid.NewGuid():N}";
    private List<string> output = new();
    private bool isRunning = false;
    private string originalCode = "";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            originalCode = InitialCode;
            await JSRuntime.InvokeVoidAsync("codeEditor.initializeEditor", editorId, InitialCode, ReadOnly);
        }
    }
    
    private async Task RunCode()
    {
        if (isRunning) return;
        
        isRunning = true;
        output.Clear();
        StateHasChanged();
        
        try
        {
            // Get code from editor
            var code = await JSRuntime.InvokeAsync<string>("codeEditor.getCode", editorId);
            
            // Execute code
            var result = await JSRuntime.InvokeAsync<CodeExecutionResult>("codeEditor.executeCode", code);
            
            if (result.Success)
            {
                output.AddRange(result.Output ?? new string[0]);
            }
            else
            {
                output.Add($"Error: {result.Error}");
            }
            
            // Trigger code changed event
            if (OnCodeChanged.HasDelegate)
            {
                await OnCodeChanged.InvokeAsync(code);
            }
        }
        catch (Exception ex)
        {
            output.Add($"Error: {ex.Message}");
        }
        finally
        {
            isRunning = false;
            StateHasChanged();
        }
    }
    
    private async Task ResetCode()
    {
        await JSRuntime.InvokeVoidAsync("codeEditor.setCode", editorId, originalCode);
        output.Clear();
        StateHasChanged();
    }
    
    public async Task SetCode(string code)
    {
        await JSRuntime.InvokeVoidAsync("codeEditor.setCode", editorId, code);
    }
    
    public async Task<string> GetCode()
    {
        return await JSRuntime.InvokeAsync<string>("codeEditor.getCode", editorId);
    }
    
    public async ValueTask DisposeAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("codeEditor.disposeEditor", editorId);
        }
        catch
        {
            // Ignore disposal errors
        }
    }
    
    public class CodeExecutionResult
    {
        public bool Success { get; set; }
        public string[]? Output { get; set; }
        public string? Error { get; set; }
    }
}
